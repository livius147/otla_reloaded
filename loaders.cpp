
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "sbb.h"
#include "wav2.h"
#include "funciones.h"
#include "loaders.h"

#include "81files.h"

char nombre_head[17];

ts_sbb_header head_sbb;

unsigned char loader[350];

double duracion_loader;
double duracion_total;

int enable_int = 0;
unsigned char reubica = 0xff;

int make_loader = 1;
int checkloaderror = 1;
int motor = 1;

//int pausa_ms = 1000;
int pausa_ms = 500;

void make_table(char *t, int t00, int t01, int t10, int t11, int max)
{
	int i = 0;
	do
		if (i < t00)
			t[i] = 0xfc;
		else if (i < t01)
			t[i] = 0xfd;
		else if (i < t10)
			t[i] = 0xfe;
		else if (i < t11)
			t[i] = 0xff;
		else
			t[i] = 0x40;
	while (++i < max);

}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

char velozloader_zx48_code[]
    = {
	0x21, 0xF2, 0x5C, 0x11, 0x58, 0xFF, 0x06, 0x01, 0xED, 0xB0,
	0xC3, 0xFA, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD,
	0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x56, 0x2B, 0x5E, 0xD5,
	0x1E, 0x08, 0x01, 0xFE, 0xEA, 0xE5, 0xF3, 0x53, 0xAF, 0xED,

	0x59, 0x3C, 0xED, 0x70, 0xE2, 0x7E, 0xFF, 0xED, 0x41, 0x3C,
	0xED, 0x70, 0xEA, 0x86, 0xFF, 0xFE, 0x39, 0xCB, 0x12, 0xFE,
	0x29, 0x30, 0xE7, 0x14, 0x20, 0xE4, 0xED, 0x70, 0xE2, 0x97,
	0xFF, 0xFE, 0x19, 0x78, 0x38, 0x06, 0xAB, 0xED, 0x70, 0xEA,
	0xA2, 0xFF, 0x32, 0xBF, 0xFF, 0xAB, 0x32, 0xCC, 0xFF, 0xEB,

	0xAF, 0xDD, 0x6F, 0x18, 0x08, 0xA4, 0x12, 0x13, 0xDD, 0xAD,
	0xDD, 0x6F, 0x79, 0x23, 0xED, 0x70, 0xEA, 0xBC, 0xFF, 0x26,
	0xFF, 0x66, 0x2E, 0x53, 0x07, 0x17, 0x23, 0xED, 0x70, 0xE2,
	0xC9, 0xFF, 0xD2, 0xB4, 0xFF, 0x05, 0xCB, 0xD8, 0xED, 0x41,
	0xA4, 0xFA, 0xBC, 0xFF, 0xE1, 0xc1, 0x71, 0x23, 0x70, 0xDD,

	0x7D, 0xB7, 0xFB, 0xC8, 0xCF, 0x1A, 0xFF, 0x3F, 0xC3, 0xE3,
	0xFF, 0x21, 0xE6, 0xFF, 0xCD, 0x6F, 0xFF, 0x2A, 0xE7, 0xFF,
	0xCD, 0x6F, 0xFF, 0x18, 0xEF, 0x11, 0x00, 0x00, 0x18, 0xED
};

unsigned char header_zx_loader[19]
    = {
	0x00,			//flagheader
	0x00,			//type program
	'o', 't', 'l', 'a', ' ', '4', ' ', 'z', 'x', ' ',	// name
	207, 0,			//length  ;244, 0,      //length
	10, 0,			//dir ini
	207, 0,			//param2=length ;244, 0,      //param2=length
	0			//chksum
};

unsigned char basic_zx_loader[29]
    = {
	0xff,			//flagblock
	0, 10,			// line  basic num
	240, 0,			// line basic length
	0xf9, 0xb0, '"', '0', '0', '0', '0', '0', '"', ':',	//CLEAR VAL "60000": REM
	0xf9, 0xc0, 0xb0, '"', '2', '3', '7', '8', '1', '"', ':', 0xea,	//RAMDOMIZE USR VAL "23781": REM
	0
};

int wavloader4zx(void)
{
	int res;

	memcpy(header_zx_loader + 2, head_sbb.nombre, 10);
	memcpy(loader, basic_zx_loader, 27);

	if (head_sbb.clear_sp)
		sprintf((char*)loader + 5, "\xfd\xB0\"%i\"", head_sbb.clear_sp);
	loader[14] = ':';

	memcpy(loader + 27, velozloader_zx48_code, 180);

	if ((!enable_int))
		loader[179] = 0xf3;
	if (!checkloaderror)
		loader[180] = 0xc9;

	if (freq_muestreo == 44100) {
		loader[97] = 0x2c;
		loader[109] = 0x1e;	//2.1
		switch (s_p_b) {	/*
					   case _1_75:
					   loader [27+113]=loader [27+126]=0x2C;
					   loader [27+123]=0x58;
					   make_table (loader+27+13,5,8,10,16,23);
					   break;
					   case _2_25:
					   loader [27+113]=loader [27+126]=0x2C;
					   loader [27+123]=0x55;
					   make_table (loader+27+13,5,7,10,16,23);
					   break;
					   case _2_75:
					   loader [27+113]=loader [27+126]=0x2C;
					   loader [27+123]=0x53;
					   make_table (loader+27+13,6,9,11,16,23);
					   break;           */

		case _2_50:
			loader[27 + 123] = 0x58;
			make_table((char*)loader + 27 + 13, 7, 11, 17, 23, 23);
			break;
		case _3_00:
			loader[27 + 123] = 0x55;
			make_table((char*)loader + 27 + 13, 7, 12, 17, 23, 23);
			break;
		case _3_50:
			loader[27 + 123] = 0x53;
			make_table((char*)loader + 27 + 13, 7, 12, 17, 23, 23);
			break;
		case _4_00:
			loader[27 + 123] = 0x50;
			make_table((char*)loader + 27 + 13, 7, 12, 17, 23, 23);
			break;
		}
	} else {
		loader[97] = 0x27;
		loader[109] = 0x19;	//2.1
		switch (s_p_b) {	/*
					   case _1_75:
					   loader [27+123]=0x58;
					   make_table (loader+27+13,5,7,9,15,23);
					   break;
					   case _2_25:
					   loader [27+123]=0x55;
					   make_table (loader+27+13,4,6,9,15,23);
					   break;
					   case _2_75:
					   loader [27+123]=0x53;
					   make_table (loader+27+13,5,7,10,15,23);
					   break;      */

		case _2_50:
			loader[27 + 113] = loader[27 + 126] = 0x2C;	//inc hl vs inc l
			loader[27 + 123] = 0x58;
			make_table((char*)loader + 27 + 13, 6, 11, 16, 22, 23);
			break;
		case _3_00:
			loader[27 + 123] = 0x56;
			make_table((char*)loader + 27 + 13, 6, 11, 16, 22, 23);
			break;
		case _3_50:
			loader[27 + 123] = 0x53;
			make_table((char*)loader + 27 + 13, 6, 11, 15, 21, 23);
			break;
		case _4_00:
			loader[27 + 123] = 0x51;
			make_table((char*)loader + 27 + 13, 6, 11, 16, 22, 23);
			break;
		}
	}

	if ((head_sbb.origin == _Snapshot4ZX48_) ||	//snap
	    (head_sbb.origin == _Snapshot4ZX128_))	//snap
	{
		loader[27 + 152] = 0xf3;	// di
		loader[27 + 159] = 0x00;
		loader[27 + 160] = 0x5b;	//salta a 5b00
		loader[27 + 175] = 0x31;	//coloca SP  a 0000
	}

	header_zx_loader[16] = header_zx_loader[12];
	loader[header_zx_loader[12]] = '\r';
	loader[3] = header_zx_loader[12] - 4;

	block2zx_wav(header_zx_loader, 19);
	block2zx_wav(loader, header_zx_loader[12] + 2);

//  pseudopause (22);
	pseudopause(25);

	return res;
}

  ///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

char velozloader_cpc_code[256]
    = {
	0x21, 0x0E, 0x80, 0x11, 0x0E, 0xFF, 0x01, 0xEC, 0x00, 0xED,
	0xB0, 0xC3, 0xCE, 0xFF, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42,
	0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x0A, 0x4C, 0x6F, 0x61, 0x64, 0x69, 0x6E,

	0x67, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00, 0x56, 0x2B,
	0x5E, 0xD5, 0xE5, 0xEB, 0xF3, 0xD9, 0xC5, 0x01, 0x10, 0x7F,
	0xED, 0x49, 0x0E, 0x44, 0xD9, 0x01, 0x10, 0xF5, 0xD9, 0xED,
	0x41, 0xD9, 0xAF, 0x3C, 0xED, 0x70, 0xFA, 0x53, 0xFF, 0xD9,
	0xED, 0x49, 0xD9, 0x3C, 0xED, 0x70, 0xF2, 0x5D, 0xFF, 0xFE,

	0X39, 0xCB, 0x11, 0xFE, 0x29, 0x30, 0xE3, 0x0C, 0x20, 0xDD,
	0xED, 0x70, 0xFA, 0x6E, 0xFF, 0xFE, 0x19, 0x3E, 0xF2, 0x38,
	0x07, 0xEE, 0x08, 0xED, 0x70, 0xF2, 0x7B, 0xFF, 0x32, 0x96,
	0xFF, 0xEE, 0x08, 0x32, 0xA6, 0xFF, 0xAF, 0x4F, 0x18, 0x07,
	0xA4, 0x12, 0x13, 0xA9, 0x4F, 0x3E, 0xFE, 0x2C, 0xED, 0x70,

	0xF2, 0x93, 0xFF, 0xD9, 0x0C, 0xCB, 0x99, 0xD9, 0x26, 0xFF,
	0x66, 0x2E, 0x0C, 0x2C, 0xED, 0x70, 0xFA, 0xA3, 0xFF, 0x07,
	0x17, 0x30, 0xDF, 0xD9, 0xED, 0x49, 0xD9, 0xA4, 0xFA, 0x93,
	0xFF, 0xD9, 0xC1, 0xD9, 0xE1, 0xD1, 0x73, 0x23, 0x72, 0x79,
	0xB7, 0xF3, 0xC8, 0x21, 0x2B, 0xFF, 0xCD, 0x5A, 0xBB, 0x7E,

	0xB7, 0x23, 0x20, 0xF8, 0xFB, 0xC9, 0x01, 0x0E, 0xFF, 0x01,
	0x10, 0xF6, 0xED, 0x49, 0xCD, 0xE9, 0xFF, 0x01, 0xEF, 0xF6,
	0xED, 0x49, 0x2A, 0xE7, 0xFF, 0xFB, 0xE9, 0xC9, 0x1F, 0xC0,
	0x01, 0xE3, 0xFF, 0x21, 0xE3, 0xFF, 0xCD, 0x3A, 0xFF, 0x2A,
	0xE4, 0xFF, 0xCD, 0x3A, 0xFF, 0x18, 0xEF
};

unsigned char header_cpc_loader[259]
    = {
	0x2c,
	'O', 't', 'l', 'a', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	1,			//block number
	0xff,			//flag last block
	2,			//type machine code
	255, 0,			//length
	0x00, 0x80,		//start address
	0xff,			//flag first block
	255, 0,			//logical length
	0x00, 0x80		//exec address
};

int wavloader4cpc(void)
{
	int res;
	int i;

	memcpy(header_cpc_loader + 1, head_sbb.nombre, 16);

	loader[0] = 0x16;	//block
	memcpy(loader + 1, velozloader_cpc_code, 255);

	for (i = 1; i < 255; i++)
		if (loader[i] == 0xff)
			loader[i] = reubica;

	if (enable_int)
		loader[192] = 0xfb;
	if (!checkloaderror)
		loader[193] = 0xc9;
	if (!motor)
		loader[213] = 0x3e;

	if (freq_muestreo == 44100)
		switch (s_p_b) {
		case _1_75:
			make_table((char*)loader + 15, 3, 5, 8, 14, 29);
			break;
		case _2_25:
			make_table((char*)loader + 15, 5 + 1, 8, 11, 16, 29);
			break;
		case _2_75:
			//make_table (loader+15,8,11,14,22,29);
			make_table((char*)loader + 15, 8, 11, 14, 22, 29);
			break;

		case _2_50:
			make_table((char*)loader + 15, 4, 10, 15, 23, 29);
			break;
		case _3_00:
			make_table((char*)loader + 15, 7, 12, 18, 26, 29);
			break;
		case _3_50:
			make_table((char*)loader + 15, 10, 15, 21, 29, 29);
			break;
		case _4_00:
			make_table((char*)loader + 15, 12, 18, 24, 31, 32);
			break;

		case _3_75:
			make_table((char*)loader + 15, 9, 17, 26, 34, 34);
			break;
		case _4_25:
			// make_table (loader+15,12,20,29,37,37);
			make_table((char*)loader + 15, 11, 19, 28, 36, 36);
			break;

	} else
		switch (s_p_b) {
		case _1_75:
			make_table((char*)loader + 15, 2, 4, 7, 12, 29);
			break;
		case _2_25:
			make_table((char*)loader + 15, 4, 7, 10, 14, 29);
			break;
		case _2_75:
			make_table((char*)loader + 15, 7, 10, 12, 17, 29);
			break;

		case _2_50:
			make_table((char*)loader + 15, 3, 8, 14, 21, 29);
			break;
		case _3_00:
			make_table((char*)loader + 15, 6, 11, 16, 22, 29);
			break;
		case _3_50:
			make_table((char*)loader + 15, 8, 14, 19, 27, 29);
			break;
		case _4_00:
			make_table((char*)loader + 15, 11, 16, 21, 29, 30);
			break;

		case _3_75:
			make_table((char*)loader + 15, 7, 15, 23, 31, 31);
			break;
		case _4_25:
			make_table((char*)loader + 15, 11, 19, 28 - 1, 37, 37);
			break;
		}

	block2cpc_wav(header_cpc_loader);
	block2cpc_wav(loader);

	pseudopause(40);

	return res;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

char calibpilot_code[280]
    = {
	0x21, 0x30, 0xC0, 0x11, 0x30, 0xF4, 0x01, 0x0A, 0x01, 0xED,
	0xB0, 0xC3, 0x59, 0xF4, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
	0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E,
	0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
	0x4F, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20,

	0x65, 0x72, 0x72, 0x6F, 0x72, 0x3E, 0x0F, 0xD3, 0xAA, 0xF3,
	0x3E, 0x0E, 0xD3, 0xA0, 0x01, 0xA2, 0xF2, 0x11, 0x10, 0x08,
	0x32, 0xB6, 0xF4, 0x3E, 0x87, 0x23, 0x2B, 0x3C, 0xED, 0x70,
	0xFA, 0x6F, 0xF4, 0x23, 0x2B, 0x3C, 0xED, 0x70, 0xF2, 0x77,
	0xF4, 0xFE, 0xC0, 0xCB, 0x13, 0xFE, 0xB0, 0x30, 0xE3, 0x1C,

	0x20, 0xDD, 0xED, 0x70, 0xFA, 0x88, 0xF4, 0xFE, 0xA0, 0x32,
	0xB7, 0xF4, 0x07, 0x07, 0x07, 0x07, 0xCD, 0xB8, 0xF4, 0x3A,
	0xB7, 0xF4, 0xCD, 0xB8, 0xF4, 0x3A, 0xB6, 0xF4, 0x07, 0x07,
	0x07, 0x07, 0xCD, 0xB8, 0xF4, 0x3A, 0xB6, 0xF4, 0xCD, 0xB8,
	0xF4, 0x01, 0xAA, 0x7F, 0xED, 0x41, 0xFB, 0xC9, 0x00, 0x00,

	0xE6, 0x0F, 0xF6, 0x30, 0xFE, 0x3A, 0x38, 0x02, 0xC6, 0x07,
	0xD3, 0x98, 0xC9
};

char test_velozloader_msx_code[280]
    = {
	0x21, 0x30, 0xC0, 0x11, 0x30, 0xF4, 0x01, 0x0A, 0x01, 0xED,
	0xB0, 0xC3, 0xF2, 0xF4, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
	0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E,
	0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
	0x4F, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20,

	0x65, 0x72, 0x72, 0x6F, 0x72, 0x56, 0x2B, 0x5E, 0xD5, 0xE5,
	0xF3, 0x3E, 0x0E, 0xD3, 0xA0, 0x01, 0xA2, 0xF2, 0x11, 0x10,
	0x08, 0x3E, 0x87, 0x23, 0x2B, 0x3C, 0xED, 0x70, 0xFA, 0x6D,
	0xF4, 0x23, 0x2B, 0x3C, 0xED, 0x70, 0xF2, 0x75, 0xF4, 0xFE,
	0xba, 0xCB, 0x13, 0xFE, 0xac, 0x30, 0xE6, 0x1C, 0x20, 0xE0,

	0xED, 0x70, 0xFA, 0x86, 0xF4, 0xFE, 0x9f, 0x78, 0x38, 0x06,
	0xAA, 0xED, 0x70, 0xF2, 0x91, 0xF4, 0x32, 0xAC, 0xF4, 0xAA,
	0x32, 0xBA, 0xF4, 0xEB, 0x1B, 0xAF, 0x47, 0x18, 0x06, 0xA4,
	0x12, 0xA8, 0x47, 0x3E, 0xFE, 0x2C, 0xED, 0x70, 0xF2, 0xA9,
	0xF4, 0x13, 0x26, 0xF4, 0x66, 0x2E, 0x2E, 0x07, 0x17, 0x2C,

	0xED, 0x70, 0xFA, 0xB7, 0xF4, 0xD2, 0xA3, 0xF4, 0x1B, 0x40,
	0xA4, 0xFA, 0xA9, 0xF4, 0xE1, 0xD1, 0x73, 0x23, 0x72, 0x78,
	0xB7, 0xFB, 0xC8, 0x21, 0x4B, 0xF4, 0x01, 0x98, 0x13, 0xED,
	0xB3, 0xE1, 0xE1, 0xC9, 0x30, 0x00, 0xC2, 0xC9, 0x0A, 0xF5,
	0x21, 0xDA, 0xF4, 0x34, 0x7E, 0xD3, 0x98, 0xCD, 0x59, 0xF4,

	0x2A, 0xDB, 0xF4, 0xCD, 0x59, 0xF4, 0x18, 0xEB, 0x21, 0x16,
	0xF5, 0x3E, 0xAA, 0x32, 0xFF, 0xFF, 0x3E, 0x0F, 0xD3, 0xAA,
	0xCD, 0xE0, 0xF4, 0x01, 0xAA, 0x7F, 0xED, 0x41, 0x2A, 0xDE,
	0xF4, 0xE9,

	0x21, 0x00, 0xC2, 0x77, 0xAF, 0xD3, 0x99, 0x3E,
	0x80, 0xD3, 0x99, 0x01, 0xFE, 0x02, 0x7E, 0x07, 0x07, 0x07,

	0x07, 0xCD, 0x2C, 0xF5, 0x7E, 0xCD, 0x2C, 0xF5, 0x36, 0x11,
	0x23, 0x0B, 0x04, 0x10, 0xED, 0xC9, 0xE6, 0x0F, 0xF6, 0x30,
	0xFE, 0x3A, 0x38, 0x02, 0xC6, 0x07, 0xD3, 0x98, 0xC9
};

/* //////////////////////////////////////////////////////
memory dump (BSAVE/BLOAD)
  filedescriptor: long header
                  10x #D0
                  6 bytes filename

  file data:      short header
                  2 bytes start address
                  2 bytes end address
                  2 bytes exec addr
                  memory dump
//////////////////////////////////////////////////////*/

#define MSX_START_ADDRESS  0xc022

int wavloader4msx(void)
{
	int res;
	int i, longitud;

	if (head_sbb.origin == _test_)
		longitud = 280;
	else
		longitud = 233;

	loader[0] = MSX_START_ADDRESS & 0xff;
	loader[1] = MSX_START_ADDRESS >> 8;
	loader[2] = (MSX_START_ADDRESS + longitud) & 0xff;
	loader[3] = (MSX_START_ADDRESS + longitud) >> 8;
	loader[4] = MSX_START_ADDRESS & 0xff;	//exec
	loader[5] = MSX_START_ADDRESS >> 8;

	memcpy(loader + 6, test_velozloader_msx_code, longitud);

	for (i = 6; i < longitud + 6; i++)
		if (loader[i] == 0xf4)
			loader[i] = reubica;
		else if (loader[i] == 0xf5)
			loader[i] = reubica + 1;

	if (head_sbb.clear_sp) {
		loader[208 + 6] = 0x31;
		loader[209 + 6] = head_sbb.clear_sp & 0xff;
		loader[210 + 6] = head_sbb.clear_sp >> 8;
	}

	loader[212 + 6] = head_sbb.poke_ffff;

	if (enable_int)
		loader[177] = 0xfb;
	else
		loader[177] = 0xf3;

	if ((!checkloaderror) || (head_sbb.origin == _test_))
		loader[178] = 0xc9;

	if (!motor)
		loader[217 + 6] = 0x3f;

	if (freq_muestreo == 44100)
		switch (s_p_b) {
		case _1_75:
			make_table((char*)loader + 20, 3, 6, 8, 12, 27);
			break;
		case _2_25:
			make_table((char*)loader + 20, 5, 8, 10, 15, 27);
			break;
		case _2_75:
			make_table((char*)loader + 20, 8, 10, 13, 18, 27);
			break;

		case _2_50:
			make_table((char*)loader + 20, 4, 9, 14, 21, 27);
			break;
		case _3_00:
			make_table((char*)loader + 20, 7, 12, 17, 24, 27);
			break;
		case _3_50:
			make_table((char*)loader + 20, 9, 14, 19, 27, 27);
			break;
		case _4_00:
			make_table((char*)loader + 20, 12, 17, 22, 29, 29);
			break;
	} else
		switch (s_p_b) {
		case _1_75:
			make_table((char*)loader + 20, 2, 5, 7, 13, 27);
			break;
		case _2_25:
			make_table((char*)loader + 20, 4, 7, 9, 14, 27);
			break;
		case _2_75:
			make_table((char*)loader + 20, 7, 9, 12, 16, 27);
			break;

		case _2_50:
			//make_table (loader+20, 4, 9,13,21,27);
			make_table((char*)loader + 20, 3, 8, 13, 21, 27);
			break;
		case _3_00:
			//make_table (loader+20, 7,12,16,24,27);
			make_table((char*)loader + 20, 6, 11, 16, 24, 27);
			break;
		case _3_50:
			// make_table (loader+20, 9,14,18,26,27);
			make_table((char*)loader + 20, 8, 13, 18, 26, 27);
			break;
		case _4_00:
			// make_table (loader+20, 9,14,18,26,27);
			make_table((char*)loader + 20, 11, 16, 21, 27, 27);
			break;
		}
	//  memcpy (loader+6, calibpilot_code ,longitud);
	block2msx_bin_wav(head_sbb.nombre, loader, 6 + longitud, 0xd0);

	pseudopause(50);

	return res;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

unsigned char p_program[242] = {
	0x00, 0x03, 0x00, 0xE1, 0x40, 0xE2, 0x40, 0xFA, 0x40, 0x00, 0x00, 0xFB,
	0x40, 0xCE, 0x40, 0x00,
	0xC0, 0xFB, 0x40, 0xFB, 0x40, 0x00, 0x5D, 0x40, 0x00, 0x02, 0x00, 0x00,
	0xBF, 0xFD, 0xFF, 0x37,
	0xCF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x0C, 0x00, 0x00, 0xF9,
	0xE3, 0x00, 0x00, 0xBC,
	0x21, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x84, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x00, 0xEA, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xC9,
	0x76, 0x00, 0x02, 0x05,
	0x00, 0xF8, 0x0B, 0xB5, 0x0B, 0x76, 0x00, 0x03, 0x0E, 0x00, 0xF9, 0xD4,
	0x1D, 0x22, 0x21, 0x1D,
	0x20, 0x7E, 0x8F, 0x01, 0x04, 0x00, 0x00, 0x76, 0x76, 0x76, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76,
	0x76, 0x80
};

unsigned char hi_loader[29] = {
	0x70, 0x23, 0x41, 0xED, 0x70, 0xE2, 0x3F, 0x40, 0x79, 0x3D, 0xED, 0x70,
	0xEA, 0x45, 0x40, 0xBA,
	0xCB, 0x10, 0x30, 0xEC, 0xD3, 0xFF, 0xBB, 0x30, 0xEA, 0xD3, 0xFE, 0xFB,
	0xC9
};

unsigned char ini_hi_load[63] = {
	0xF3, 0xD3, 0xFD, 0x18, 0x20, 0x3E, 0x00, 0xED, 0x4F, 0x3E, 0x00, 0xED,
	0x47, 0xFD, 0x21, 0x00,
	0x00, 0xDD, 0x21, 0x00, 0x00, 0x21, 0x00, 0x00, 0x11, 0x00, 0x00, 0x01,
	0x00, 0x00, 0xD9, 0x01,
	0x00, 0x00, 0xC5, 0xF1, 0x08, 0x01, 0xFE, 0x00, 0x11, 0xE9, 0xF6, 0x21,
	0x82, 0x40, 0x04, 0xCD,
	0x3F, 0x40, 0x10, 0xFA, 0x3E, 0x30, 0x32, 0x4E, 0x40,
	0x3A, 0x66, 0x40, 0xC3, 0x3E, 0x40
};

unsigned char restore_zx81[25] = {
	0xE1,
	0xD1,
	0xC1,
	0xF1,
	0,
	0x18, 0x01,
	0x76,
	0x31, 0x65, 0x40,
	0xD3, 0xFD,
	0xFB,
	0xC3, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char prog_p_81[169] = {
	0x00, 0x03, 0x00, 0x98, 0x40, 0x99, 0x40, 0xB1, 0x40, 0x00, 0x00, 0xB2,
	0x40, 0x85, 0x40, 0x00,
	0xC0, 0xB2, 0x40, 0xB2, 0x40, 0x00, 0x5D, 0x40, 0x00, 0x02, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0x37,
	0x86, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x0C, 0x00, 0x00, 0xF9,
	0xF8, 0x00, 0x00, 0xBC,
	0x21, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x84, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0xF8, 0x0B, 0xB5, 0x0B,
	0x76, 0x00, 0x03, 0x0E,
	0x00, 0xF9, 0xD4, 0x1D, 0x22, 0x20, 0x23, 0x1D, 0x7E, 0x8F, 0x00, 0xAE,
	0x00, 0x00, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76,
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x80
};

unsigned char code_p_81[52 + 6] = {
	0x70, 0x23, 0x41, 0xED, 0x70, 0xE2, 0x3F, 0x40, 0x79, 0x3D, 0xED, 0x70,
	0xEA, 0x45, 0x40, 0xBA,
	0xCB, 0x10, 0x30, 0xEC, 0xD3, 0xFF, 0xBB, 0x30, 0xEA, 0xCF, 0xFF, 0xD3,
	0xFD, 0x01, 0xFE, 0x00,
	0x11, 0xE9, 0xF6,
	0x21, 0xfe, 0xff,
	0x22, 0x07, 0x40,
	0x21, 0x09, 0x40, 0x04, 0xCD, 0x3F, 0x40, 0x10, 0xFA, 0x3E, 0x30, 0x32,
	0x4E,
	0x40, 0xC3, 0x3E, 0x40
};

st_snap_81 *snap_81;

int loader4zx81(void)
{
	int res;

	char zx81_block[1024];
	int size_81_loader;

	if (freq_muestreo == 44100)
		switch (s_p_b) {
		case _3_50:
			code_p_81[34] = ini_hi_load[42] = 0xf5;
			code_p_81[33] = ini_hi_load[41] = 0xef;
			break;
		case _2_75:
			code_p_81[34] = ini_hi_load[42] = 0xf7;
			code_p_81[33] = ini_hi_load[41] = 0xf1;
			break;
		case _2_50:
			code_p_81[34] = ini_hi_load[42] = 0xf8;
			code_p_81[33] = ini_hi_load[41] = 0xf1;
			break;
		case _1_75:
			code_p_81[34] = ini_hi_load[42] = 0xfa;
			code_p_81[33] = ini_hi_load[41] = 0xf3;
			break;
	} else
		switch (s_p_b) {
		case _3_50:
			code_p_81[34] = ini_hi_load[42] = 0xf6;
			code_p_81[33] = ini_hi_load[41] = 0xf0;
			break;
		case _2_75:
			code_p_81[34] = ini_hi_load[42] = 0xf8;
			code_p_81[33] = ini_hi_load[41] = 0xf2;
			break;
		case _2_50:
			code_p_81[34] = ini_hi_load[42] = 0xf9;
			code_p_81[33] = ini_hi_load[41] = 0xf2;
			break;
		case _1_75:
			code_p_81[34] = ini_hi_load[42] = 0xfb;
			code_p_81[33] = ini_hi_load[41] = 0xf4;
			break;
		}

	zx81_block[0] = '4';	//nombre = OO
	zx81_block[1] = 0x80 + '4';
	zx81_block[0] = '4';	//nombre = OO

	switch (head_sbb.origin) {
	case _81_program_:
		memcpy(zx81_block + 2, prog_p_81, sizeof(prog_p_81));
		memcpy(zx81_block + 53, code_p_81, sizeof(code_p_81));
		size_81_loader = 2 + sizeof(prog_p_81);
		break;
	case _test_:
		memcpy(zx81_block + 2, p_program, sizeof(p_program));
		memcpy(zx81_block + 123, ini_hi_load, sizeof(ini_hi_load));
		memcpy(zx81_block + 53, hi_loader, sizeof(hi_loader));
		size_81_loader = 2 + sizeof(p_program);

		*(unsigned short *)&zx81_block[167] = 16514;
		zx81_block[180] = 0x3a;
		break;
	case _81_snap_:
		memcpy(zx81_block + 2, p_program, sizeof(p_program));
		memcpy(zx81_block + 123, ini_hi_load, sizeof(ini_hi_load));
		memcpy(zx81_block + 53, hi_loader, sizeof(hi_loader));
		size_81_loader = 2 + sizeof(p_program);

		*(unsigned short *)&zx81_block[167] = 0x4000;
		zx81_block[180] = 0x31;
		zx81_block[126] = 0xed;
		if (snap_81->IM == 1)
			zx81_block[127] = 0x56;
		else if (snap_81->IM == 2)
			zx81_block[127] = 0x5e;
		else
			zx81_block[127] = 0x46;
		zx81_block[129] = snap_81->R;
		zx81_block[133] = snap_81->I;
		*(unsigned short *)&zx81_block[138] = snap_81->IY;
		*(unsigned short *)&zx81_block[142] = snap_81->IX;
		*(unsigned short *)&zx81_block[145] = snap_81->HLx;
		*(unsigned short *)&zx81_block[148] = snap_81->DEx;
		*(unsigned short *)&zx81_block[151] = snap_81->BCx;
		*(unsigned short *)&zx81_block[155] = snap_81->AFx;

		*(unsigned short *)&restore_zx81[9] = snap_81->SP;
		restore_zx81[12] = snap_81->NMI ? 0xfe : 0xfd;
		restore_zx81[13] = snap_81->EI_DI ? 0xfb : 0xf3;
		*(unsigned short *)&restore_zx81[15] = snap_81->PC;
		*(unsigned short *)&restore_zx81[17] = snap_81->HL;
		*(unsigned short *)&restore_zx81[19] = snap_81->DE;
		*(unsigned short *)&restore_zx81[21] = snap_81->BC;
		*(unsigned short *)&restore_zx81[23] = snap_81->AF;
		break;
	}

	zx81_block[71] = 0xc9;	// ret -> jr nc,

	//no seudopause s.slow
	block281_wav((unsigned char*)zx81_block, size_81_loader);

	return res;
}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
int sbb2wav(const char *file_in, const char *file_out)
{
	int res = 0;
	FILE *sbb_file;
	int b = 1;
	char s[250];

	unsigned char veloz_header[20];
	unsigned short direccion;;

	ts_sbb_block blocks_sbb[1 + 1];
	snap_81 = (st_snap_81 *) blocks_sbb[0].data;

	sbb_file = fopen(file_in, "rb");
	if (sbb_file != NULL) {
		if (!(open_wav(file_out))) {
			fread(&head_sbb, 1, sizeof(head_sbb), sbb_file);
			res = ajusta_version(&head_sbb);
			strncpy(nombre_head, head_sbb.nombre, 16);
			nombre_head[16] = 0;
			reubica = head_sbb.locate;
			enable_int = head_sbb.ei_di;
			if (make_loader && !res)
				switch (head_sbb.machine[0]) {
				case 'Z':
					wavloader4zx();
					direccion = 0xff58;
					break;
				case 'C':
					wavloader4cpc();
					direccion = reubica * 0x100;
					break;
				case 'M':
					wavloader4msx();
					direccion = reubica * 0x100;
					break;
				case '8':
					if (head_sbb.origin == _81_snap_)	// lee el bloque de registros
						if (fread
						    (&blocks_sbb[0], 1,
						     SIZE_BLOCK_HEADER,
						     sbb_file) ==
						    SIZE_BLOCK_HEADER)
							if (fread
							    (blocks_sbb[0].data,
							     1,
							     blocks_sbb[0].size,
							     sbb_file) ==
							    (unsigned)
							    blocks_sbb[0].size)
								snap_81 =
								    (st_snap_81
								     *)
								    blocks_sbb
								    [0].data;
					loader4zx81();
					direccion = 0;
					break;
				default:
					res = -4;
					break;
				}

			duracion_loader = dura();
			if (!res)
				while (fread
				       (&blocks_sbb[0], 1, SIZE_BLOCK_HEADER,
					sbb_file) == SIZE_BLOCK_HEADER)
					if (fread
					    (blocks_sbb[0].data, 1,
					     blocks_sbb[0].size,
					     sbb_file) ==
					    (unsigned)blocks_sbb[0].size)
						if (head_sbb.machine[0] == '8') {
							switch (head_sbb.origin) {
							case _81_snap_:
								memcpy
								    (blocks_sbb
								     [0].data +
								     60,
								     hi_loader,
								     sizeof
								     (hi_loader));
								memcpy
								    (blocks_sbb
								     [0].data +
								     60 + 25,
								     restore_zx81,
								     sizeof
								     (restore_zx81));
								break;
							case _81_program_:
								memcpy
								    (blocks_sbb
								     [0].data +
								     51,
								     code_p_81,
								     27);
								break;
							default:
								blocks_sbb
								    [0].size =
								    64;
								break;
							}
							block2veloz81_wav
							    (blocks_sbb[0].data,
							     blocks_sbb
							     [0].size);
							pseudopause(250);	//para el emulador  EO ???
							break;	//solo un bloque
						} else
						    if ((blocks_sbb
							 [0].block_type ==
							 _test_)
							||
							(blocks_sbb
							 [0].block_type ==
							 '6')) {
							pseudopause(pausa_ms);
							block2veloz_wav
							    (blocks_sbb[0].data,
							     -1);
							block2veloz_wav
							    (blocks_sbb[0].data,
							     blocks_sbb
							     [0].size);
							break;
						} else {
							if ((blocks_sbb[0].ini < direccion) &&	//2.0.2
							    (direccion <
							     (blocks_sbb[0].ini
							      +
							      blocks_sbb
							      [0].size)))
								blocks_sbb
								    [0].size =
								    direccion -
								    blocks_sbb
								    [0].ini;

							veloz_header[0] =
							    (blocks_sbb[0].ini -
							     1) & 0xff;
							veloz_header[1] =
							    (blocks_sbb[0].ini -
							     1) >> 8;

							veloz_header[3] =
							    blocks_sbb[0].exec &
							    0xff;
							veloz_header[4] =
							    blocks_sbb[0].exec
							    >> 8;

							if (head_sbb.n_blocks ==
							    b++)
								if (head_sbb.machine[0]
								    == 'Z')
									if (head_sbb.usr_pc)	//(blocks_sbb[0].exec)
									{
										veloz_header
										    [2]
										    =
										    0xc3;
										veloz_header
										    [3]
										    =
										    head_sbb.usr_pc
										    &
										    0xff;
										veloz_header
										    [4]
										    =
										    head_sbb.usr_pc
										    >>
										    8;
									} else
										veloz_header
										    [2]
										    =
										    0xc9;
								else if
								    (blocks_sbb
								     [0].exec)
									veloz_header
									    [2]
									    =
									    0xc3;
								else
									veloz_header
									    [2]
									    =
									    0xc9;
							else if (blocks_sbb
								 [0].exec)
								veloz_header[2]
								    = 0xcd;
							else
								veloz_header[2]
								    = 0x01;

							pseudopause(pausa_ms);
							block2veloz_wav
							    (veloz_header, 5);
							block2veloz_wav
							    (blocks_sbb[0].data,
							     blocks_sbb
							     [0].size);
					} else
						res = -3;

			close_wav();
			duracion_total = dura();
		} else {
			res = -1;
		}
		fclose(sbb_file);
	} else
		res = -1;
	return res;
}				///////////////////////////////////////////////////////////////////////////////

/*

unsigned char dato[]
=    {
        0xff,0xaa,0x55,0x00
    };
unsigned char azimut_cpc_code[]
 =     {
        0xF3 , 0xD5 , 0xC5 , 0xF5 , 0xD9 , 0xC5 , 0xD9 , 0x01 , 0x10 , 0xF6 ,
        0xED , 0x49 , 0xCD , 0x1C , 0x80 , 0x01 , 0xEF , 0xF6 , 0xED , 0x49 ,
        0xD9 , 0xC1 , 0xD9 , 0xF1 , 0xC1 , 0xD1 , 0xFB , 0xC9 , 0x11 , 0x00 ,
        0x81 , 0xD9 , 0x01 , 0x10 , 0x7F , 0xED , 0x49 , 0x0E , 0x44 , 0xD9 ,
        0x01 , 0x10 , 0xF5 , 0xD9 , 0xED , 0x41 , 0xD9 , 0xAF , 0x3C , 0xED ,

        0x70 , 0xFA , 0x30 , 0x80 , 0xD9 , 0xED , 0x49 , 0xD9 , 0x3C , 0xED ,
        0x70 , 0xF2 , 0x3A , 0x80 , 0xFE , 0x39 , 0xCB , 0x11 , 0xFE , 0x29 ,
        0x30 , 0xE3 , 0x0C , 0x20 , 0xDD , 0x12 , 0xAF , 0x3C , 0xED , 0x70 ,
        0xFA , 0x4D , 0x80 , 0x13 , 0x12 , 0xCB , 0x42 , 0xCB , 0x42 , 0xCA ,
        0x6C , 0x80 , 0xAF , 0x3C , 0xED , 0x70 , 0xF2 , 0x5D , 0x80 , 0x13 ,

        0x12 , 0xCB , 0x42 , 0xCB , 0x42 , 0xC2 , 0x4C , 0x80 , 0xC9
    };

int azimut2wav (const char * file_out)
{
    int r;
    int i;

    unsigned char test[300];

    r=open_wav  (file_out);//("out_zx.wav");

    memcpy  (header_cpc_loader+1,"azimut",16);

    loader [0]=0x16;   //block
    memcpy ( loader+1,azimut_cpc_code,255);

    memset (test,0,200);
    for (i=0;i<120;i++)
        test[i]=dato [(i/2)%4];
    test[i]=0xff;

    block2cpc_wav  ( header_cpc_loader);
    block2cpc_wav  ( loader );

    duracion_loader=dura();

    pilot_veloz (3000) ;
    block2veloz_wav (test,125);

    close_wav (  );
    duracion_total=dura();

    return 0;
}

unsigned char p_calib_z81[356] = {
	0x00, 0x01, 0x00, 0x53, 0x41, 0x54, 0x41, 0x6C, 0x41, 0x00, 0x00, 0x6D, 0x41, 0x75, 0x41, 0x00, 
	0x00, 0x76, 0x41, 0x76, 0x41, 0x00, 0x5D, 0x40, 0x00, 0x02, 0x00, 0x00, 0xBF, 0xFD, 0xFF, 0x37, 
	0x53, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x0C, 0x82, 0x40, 0x4F, 0xA3, 0x00, 0x00, 0xBC, 
	0x21, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0xEA, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xC9, 0x76, 0x00, 0x02, 0x0E, 0x00, 0xF9, 0xD4, 0x1D, 0x22, 
	0x21, 0x1D, 0x20, 0x7E, 0x8F, 0x01, 0x04, 0x00, 0x00, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
	0x76, 0x76, 0x76, 0x80
};

unsigned char calib_z81[61] = {
	0xF3, 0xD3, 0xFD, 0x01, 0xFE, 0x01, 0x04, 0xD3, 0xFF, 0xED, 0x70, 0xE2, 0x8B, 0x40, 0x79, 0x3D,
	0xED, 0x70, 0xEA, 0x91, 0x40, 0xFE, 0xF6, 0xCB, 0x10, 0x10, 0xEB, 0x21, 0xBE, 0x40, 0x06, 0x40,
	0x3E, 0x3E, 0x3D, 0xED, 0x70, 0xE2, 0xA4, 0x40, 0x23, 0x77, 0x23, 0x3E, 0x3E, 0x3D, 0xED, 0x70,
	0xEA, 0xAF, 0x40, 0x77, 0x10, 0xEA, 0xD3, 0xFF, 0xD3, 0xFE, 0xFB, 0xC9, 0x00
};

unsigned char test_z81[16] = {
  0x00,0xff,0x0f,0x0f,0x33,0x33,0x55,0x55,
  0x00,0xff,0x0f,0x0f,0x33,0x33,0x55,0x55
  };

int calibZ81_wav (const char * file_out)
{
    int r;
    int i;

    unsigned char test[300];

    r=open_wav  (file_out);//("out_zx.wav");

    if (freq_muestreo==44100)
        switch (s_p_b)
        {
        case _3_50:
            calib_z81[22]=0xf5;
            break;
        case _2_75:
            calib_z81[22]=0xf7;
            break;
        case _2_50:
            calib_z81[22]=0xf8;
            break;
        case _1_75:
            calib_z81[22]=0xfa;
            break;
        }
    else
        switch (s_p_b)
        {
        case _3_50:
            calib_z81[22]=0xf6;
            break;
        case _2_75:
            calib_z81[22]=0xf8;
            break;
        case _2_50:
            calib_z81[22]=0xf9;
            break;
        case _1_75:
            calib_z81[22]=0xfb;
            break;
        }
    
    zx81_block [0]='9';       //nombre = OO
    zx81_block [1]=0x80+'9';
    zx81_block [0]='9';       //nombre = OO

    memcpy ( zx81_block + 2  , p_calib_z81 , sizeof (p_calib_z81));
    memcpy ( zx81_block + 123, calib_z81   , sizeof (calib_z81));

    block281_wav  (zx81_block , 2 + sizeof (p_calib_z81));

    pseudopause (2000);
    block2veloz81_wav (test_z81 , sizeof (test_z81));
    pseudopause (250); //para el emulador  EO ???

    close_wav (  );
    duracion_total=dura();

    return 0;
}
*/
